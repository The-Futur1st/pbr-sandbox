PBR Sandbox:
    Offline:
        ☐ Debug slow shader render failure
        ☐ Create a pull request to ImGui (Vulkan + Volk)
    Online:
        ☐ Create VulkanUniformBuffer template class
        ☐ Implement Oren-Nayar diffuse BRDF
        ☐ Implement microfacet Burley 12 diffuse BRDF
        ☐ Improve microfacet BRDFs
            ☐ Different impls for D/F/G specular factors
            ☐ Multiscattering GGX + Shlick
        ☐ Try to render to a specific cubemap mip level
        ☐ Use #include parser from shaderc
    Stream 16:
        ☐ Create a material class (holds textures, shaders & UBO for material params)
        ☐ Move framebuffer/commandbuffer/ubo from VulkanRenderer to VulkanApplication as it's swapchain dependent
        ☐ Split VulkanRenderer::render method into VulkanRenderer::begin()/end() + renderObjectWithMaterial()
    Stream 15:
        ✔ Deduce shader kind from extension @done (11/26/2019, 12:44:58 AM)
        ✔ Deduce texture type (HDR or LDR) from extension @done (11/26/2019, 12:21:15 AM)
    Stream 14:
        ✔ Get rid of all hardcoded paths @done (11/23/2019, 2:42:39 AM)
        ✔ Add environment selection UI @done (11/23/2019, 3:37:47 AM)
    Stream 13:
        ✔ Integrate imgui 3rdparty @done (11/18/2019, 10:50:58 PM)
        ✔ Add debug parameter overrides for metalness & roughness @done (11/18/2019, 11:21:15 PM)
    Stream 12:
        ✔ Implement specular IBL in a naive way @done (11/7/2019, 2:11:46 AM)
    Stream 11:
        ✔ Create HDR cubemaps @done (11/6/2019, 2:00:35 AM)
    Stream 10:
        ✔ Refactor cubemap renderer to allow passing custom fragment shaders @done (9/18/2019, 9:03:09 PM)
        ✔ Render diffuse irradiance cubemap @done (9/18/2019, 9:03:09 PM)
    Stream 9:
        ✔ Debug cubemap renderer @done (9/18/2019, 9:02:22 PM)
    Stream 8:
        ✔ Add support for cubemaps to VulkanTexture class @done (9/15/2019, 7:54:57 PM)
        ✔ Render equirectangular hdr image to hdr cubemap @done (9/15/2019, 9:01:27 PM)
        ✔ Add cube sampler binding to the shader @done (9/15/2019, 9:01:28 PM)
    Stream 7:
        ✔ Transition image layout to present optimal @done (9/14/2019, 10:22:15 PM)
        ✔ Create another graphics pipeline for cubemap rendering @done (9/15/2019, 12:16:44 AM)
        ✔ Render equirectangular hdr image as cubemap @done (9/15/2019, 12:43:31 AM)
    Stream 6:
        ✔ Create pipeline builder class @done (9/14/2019, 1:48:30 AM)
    Stream 5:
        ✔ Fix microfacet BRDF & shading @done (9/12/2019, 11:29:40 PM)
        ✔ Implement IBL (naive) in the shader @done (9/13/2019, 12:56:33 AM)
        ✔ Add support for cube (hdri?) textures @done (9/13/2019, 1:12:11 AM)
    Stream 4:
        ✔ Orient helmet properly @done (9/1/2019, 6:42:51 PM)
        ✔ Add emission texture @done (9/1/2019, 6:57:24 PM)
        ✔ Implement microfacet BRDFs @done (9/1/2019, 8:36:34 PM)
            ✔ GGX + Shlick @done (9/1/2019, 8:33:05 PM)
    Stream 3:
        ✔ Add normals to vertex layout @done (8/24/2019, 7:38:07 PM)
        ✔ Find a good model with PBR textures @done (8/24/2019, 7:59:23 PM)
        ✔ Create a simple light right in the shader @done (8/24/2019, 8:51:42 PM)
        ✔ Implement diffuse BRDFs @done (8/24/2019, 11:45:52 PM)
            ✔ Lambert @done (8/24/2019, 9:21:04 PM)
            ✔ Half Lambert @done (8/24/2019, 9:21:04 PM)
        ✔ Implement specular BRDFs @done (8/24/2019, 11:45:51 PM)
            ✔ Blinn / Phong @done (8/24/2019, 10:54:19 PM)
    Stream 2:
        ✔ Replace git submodules to CMake 'find x' scripts @done (8/13/2019, 1:10:05 AM)
        ✔ Put all prebuilt 3rdparty libraries & headers to 3rdparty folder @done (8/13/2019, 1:10:06 AM)
        ✔ Move shaderc to 3rdparty and shaderc specific env variable to FindShaderC cmake module @done (8/13/2019, 1:38:10 AM)
    Stream 1:
        ✔ Find a good shader language frontend with SPIR-V support @done (8/10/2019, 5:33:46 PM)
        ✔ Integrate SPIR-V shader language frontend it into the engine @done (8/10/2019, 6:40:41 PM)



Useful Links:
    - A platform independent layer: GLFW (https://github.com/glfw/glfw) / SDL2 (https://www.libsdl.org/download-2.0.php)
    - A math library: GLM (https://github.com/g-truc/glm)
    - An asset loader: assimp (https://github.com/assimp/assimp) / TinyGLTF (https://github.com/syoyo/tinygltf)
    - An image loader: stb_image (https://github.com/nothings/stb)
    - A DDS loader: nv_dds + manual patch (https://github.com/paroj/nv_dds) / gli (https://github.com/g-truc/gli)
    - Crunch: advanced DXTn compression library (https://github.com/Unity-Technologies/crunch)

Vulkan specific:
    - Vulkan SDK: (https://vulkan.lunarg.com/sdk/home)
    - A Vulkan loader: volk (https://github.com/zeux/volk)
    - A Vulkan memory allocator: VMA https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator

DX12 specific:
    - DirectX 12 SDK: (https://www.microsoft.com/en-us/download/details.aspx?id=6812)
        - D3D12 helper library: D3DX12 (https://github.com/Microsoft/DirectX-Graphics-Samples/tree/master/Libraries/D3DX12)
        